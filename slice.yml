---
- name: Create AirVM AWS Infrastructure
  vars:
    state: present
    env_id: none
    new_version: 1.0.0
  vars_files:
  - secrets.yml
  hosts: "product_infrastructure:&{{ env_id }}"
  gather_facts: false

  pre_tasks:
  - name: Availability zones used for region {{ region }}, {{ env_id }} environment.
    debug: msg="{{ num_azs }} - {{ available_azs }} "

  - name: Get security VPC facts
    ec2_vpc_net_facts:
      region: "{{ region }}"
      aws_access_key: "{{ aws.slice.access_key }}"
      aws_secret_key: "{{ aws.slice.secret_key }}"
      filters:
        cidr: "{{ access_vpc_cidr }}"
    register: security_vpc_info

  - debug: msg={{ security_vpc_info }}

#  - set_fact: access_vpc_id={{ security_vpc_info.vpcs[0].id }}
#

#
# Kick start the process here. Refer product_infrastructure.yml to create the infrastructure setup
#
  roles:
#  - role: aws/vpc
#    vpc_net: "{{ main_vpc_net }}"
#    vpc_pcx: "{{ main_vpc_peers }}"
#    vpc_nat: "{{ main_vpc_nat }}"
#    vpc_rtb: "{{ all_vpc_routing_tables }}"
#

#  - role: aws/s3
#    aws_s3: "{{ portal_bucket }}"

#
#  - role: aws/sgx
#  - role: aws/elb
#
#  - role: aws/alb
#    alb: "{{ internal_services_lb }}"
#
#  - role: aws/alb
#    alb: "{{ public_services_lb }}"
#
  - role: aws/scaling_group
    scaling_group: "{{ product_scaling_group }}"
#
#  - role: aws/scaling_group
#    scaling_group: "{{ idm_scaling_group }}"
#
#  - role: aws/scaling_group
#    scaling_group: "{{ uw_services_scaling_group }}"
#
#  - role: aws/scaling_group
#    scaling_group: "{{ product_web_scaling_group }}"
#
#  - role: aws/scaling_group
#    scaling_group: "{{ eventstore_scaling_group }}"
#
#  - role: aws/scaling_group
#    scaling_group: "{{ claims_scaling_group }}"
#
#  - role: aws/scaling_group
#    scaling_group: "{{ claims_web_scaling_group }}"
#
#  - role: aws/scaling_group
#    scaling_group: "{{ notifications_scaling_group }}"

#  - role: aws/scaling_group
#    scaling_group: "{{ website_scaling_group }}"

#  post_tasks:
#     - name: ELB URL
