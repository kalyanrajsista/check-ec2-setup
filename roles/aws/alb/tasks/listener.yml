- name: "Create ALB Target Groups"
  aws:
    service: elbv2
    method: create_target_group
    region: "{{ region }}"
    params:
      Name: "{{ item.target_group.name }}"
      Protocol: "{{ item.target_group.protocol | upper }}"
      Port: "{{ item.target_group.port }}"
      VpcId: "{{ vpc_id }}"
      HealthCheckProtocol: "{{ item.target_group.health_check_protocol | default(omit) }}"
      HealthCheckPort: "{{ item.target_group.health_check_port | default(omit) }}"
      HealthCheckPath: "{{ item.target_group.health_check_path | default(omit) }}"
      HealthCheckIntervalSeconds: "{{ item.target_group.health_check_interval_seconds | default(30) }}"
      HealthCheckTimeoutSeconds: "{{ item.target_group.health_check_timeout_seconds | default(5) }}"
      HealthyThresholdCount: "{{ item.target_group.healthy_threshold_count | default(2) }}"
      UnhealthyThresholdCount: "{{ item.target_group.unhealthy_threshold_count | default(omit) }}"
      Matcher: "{{ item.target_group.matcher | default(omit) }}"
#        HttpCode: 'string'
  register: tg_info
  with_items: "{{ listener_item.rules }}"

# - debug:
#     msg: "{{ tg_info['pub'] }}"

- name: "Create ALB Listener"
  aws:
    service: elbv2
    method: create_listener
    region: "{{ region }}"
    params:
      LoadBalancerArn: "{{ alb_info.load_balancers[0].load_balancer_arn }}"
      Protocol: "{{ listener_item.protocol | upper }}"      # 'HTTP'|'HTTPS'
      Port: "{{ listener_item.port | default('80') }}"
      SslPolicy: "{{ listener_item.ssl_policy | default(omit) }}"
      Certificates: "{{ listener_item.certificates | default(omit) }}"
#      - CertificateArn: 'string'
      DefaultActions:
      - Type: 'forward'
        TargetGroupArn: "{{ tg_info.results[-1].target_groups[0].target_group_arn }}"
  register: listener_info

- debug:
    msg: "{{ listener_info }}"


- name: "Get ALB Listener Rules info"
  aws:
    service: elbv2
    method: describe_rules
    region: "{{ region }}"
    params:
      ListenerArn: "{{ listener_info.listeners[0].listener_arn }}"
  register: listener_rules

- name: Show rule 10 ARN
  debug:
    msg: "{{listener_rules.rules | selectattr('priority', 'equalto', '101') | map(attribute='rule_arn') | join }}"


- name: "Create ALB Listener Rule"
  aws:
    service: elbv2
    method: create_rule
    region: "{{ region }}"
    params:
      ListenerArn: "{{ listener_info.listeners[0].listener_arn }}"
      Conditions: "{{ item.1.conditions | default(omit) }}"
#      - Field: 'path-pattern'
#        Values:
#        - "{{ item.1.conditions }}"
      Priority: "{{ item.1.priority }}"
      Actions:
      - Type: 'forward'
        TargetGroupArn: "{{ tg_info.results[item.0].target_groups[0].target_group_arn }}"
  with_indexed_items: "{{ listener_item.rules }}"
  when: (item.1.priority != 'default') and (listener_rules.rules | selectattr('priority', 'equalto', item.1.priority | string) | map(attribute='rule_arn') | join == '') and not (env_id | match(item.1.exclude_envs_regex | default('^$')))


- name: "Modify ALB Listener Rule"
  aws:
    service: elbv2
    method: modify_rule
    region: "{{ region }}"
    params:
      RuleArn: "{{ listener_rules.rules | selectattr('priority', 'equalto', item.1.priority | string) | map(attribute='rule_arn') | join }}"
      Conditions: "{{ item.1.conditions | default(omit) }}"
      Actions:
      - Type: 'forward'
        TargetGroupArn: "{{ tg_info.results[item.0].target_groups[0].target_group_arn }}"
  with_indexed_items: "{{ listener_item.rules }}"
  when: (item.1.priority != 'default') and (listener_rules.rules | selectattr('priority', 'equalto', item.1.priority | string) | map(attribute='rule_arn') | join != '') and not (env_id | match(item.1.exclude_envs_regex | default('^$')))


